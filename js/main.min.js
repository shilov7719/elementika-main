$("._tab").click(function() {
    let parentBlock = $(this).parents("._tabs-parent")
    let tabId = $(this).attr("data-tab")
    $(parentBlock).find("._tab").removeClass("_active")
    $(this).addClass("_active")
    $(parentBlock).find(".tab-content").removeClass("_active")
    $(parentBlock).find(`.${tabId}`).addClass("_active")
})

$(".favourite-btn,.compare-btn").click(function () {
    $(this).toggleClass("_added")
})

$('.cartcalc').each(function (i,el) {
    let plus = $(el).find(".ccalc-plus")
    let minus = $(el).find(".ccalc-minus")
    let input = $(el).find("input")

    $(minus).click(function(e) {
        let a = $(input).val();
        if (a > 1) {
            let b = +a - 1;
            $(input).val(b);
            $(input).trigger('change');
        } else {
            $(input).val(a);
        }
        setMinusBtnClickability()
        e.stopImmediatePropagation()
    });

    $(plus).click(function(e) {
        let a = $(input).val();
        let b = +a + 1;
        $(input).val(b);
        $(input).trigger('change');
        setMinusBtnClickability(this)
        e.stopImmediatePropagation()
    });

    function setMinusBtnClickability() {
        let val = +$(input).val()
        if(val === 1){
            $(minus).addClass("_disabled")
        } else{
            $(minus).removeClass("_disabled")
        }
    }

    setMinusBtnClickability()
})

$(".footer-nav__show").click(function () {
    if(window.innerWidth<=576){
        $(this).parents(".footer-nav").toggleClass("_active")
        $(this).siblings(".footer-nav__hidden").slideToggle()
    }
})

$(document).mouseup( function(e){
    let div = $( ".header" );
    if ( !div.is(e.target)
        && div.has(e.target).length === 0 ) {
        if($(".header-menu").hasClass("_active")){
            $(".header-menu").removeClass("_active")
            $("body").removeClass("_open-header-catalog")
        }
    }
});

$(".catalog-btn").click(function () {
    $(".header-menu").toggleClass("_active")
    $("body").toggleClass("_open-header-catalog")
    $(this).toggleClass("_active")
    if(window.innerWidth<=992){
        $("body").addClass("fixed-body")
        $(".header").addClass("_open")
    }
})

$("._close-menu").click(function () {
    $("body").removeClass("fixed-body")
    $(".header").removeClass("_open")
})

$(".catalog-menu2__item").mouseover(function () {
    if(window.innerWidth>992){
        $(".catalog-menu2__item").removeClass("_active")
        $(this).addClass("_active")
    }
})


$(".catalog-menu2__show").click(function () {
    let text = $(this).html()
    console.log(text.trim())
    if(window.innerWidth<=992){
        $(".header-menu__back span").html(text)
        $(this).parents(".catalog-menu2__item").addClass("_active2")
        $(".header-menu").addClass("_open-submenu")
    }
})

$(".header-menu__back").click(function () {
    $(".catalog-menu2__item").removeClass("_active2")
    $(".header-menu").removeClass("_open-submenu")
})

$(".catalog-submenu__show").click(function () {
    if(window.innerWidth<=992){
        $(this).parents(".catalog-submenu__item").addClass("_active")
        $(this).siblings(".catalog-submenu__hidden").slideToggle()
    }
})

$("._show-search").click(function () {
    $(".header-search").addClass("_open")
})

$("._search-field").on("input",function () {
    if($(this).val().length > 3){
        $(this).parents(".m-search").addClass("_show")
    }
})

$(document).mouseup( function(e){
    let div = $( ".header-search" );
    if ( !div.is(e.target)
        && div.has(e.target).length === 0 ) {
        if($(div).hasClass("_show")){
            $(div).removeClass("_show")
        }
        if(window.innerWidth<=576){
            if($(div).hasClass("_open")){
                $(div).removeClass("_open")
            }
        }
    }
});

function Sliders() {
    let SlidersArray = []

    let sliders = document.querySelectorAll(".slider")
    sliders.forEach((slider,index) => {
        slider.setAttribute("data-slider-id",index)
        let isLoop = slider.classList.contains("_loop")

        SlidersArray[index] = new Swiper(`.slider[data-slider-id="${index}"] .swiper-container`, {
            slidesPerView: "auto",
            spaceBetween: 0,
            watchSlidesProgress: true,
            preventClicks :true,
            a11y: false,
            observer: true,
            observeParents: true,
            observeSlideChildren: true,
            loop: isLoop,
            navigation: {
                nextEl: `.slider[data-slider-id="${index}"] .swiper-button-next`,
                prevEl: `.slider[data-slider-id="${index}"] .swiper-button-prev`,
            },
            pagination: {
                el: `.slider[data-slider-id="${index}"] .swiper-pagination`,
                type: 'bullets',
                clickable: true,
            },
            scrollbar: {
                el: `.slider[data-slider-id="${index}"] .swiper-scrollbar`,
                draggable: true,
                snapOnRelease: true,
                dragSize: 'auto',
            },
        })
    })
}

function Sliders2() {
    let SlidersArray = []

    let sliders = document.querySelectorAll(".slider2")
    sliders.forEach((slider,index) => {
        slider.setAttribute("data-slider-id",index)
        let isLoop = slider.classList.contains("_loop")

        SlidersArray[index] = new Swiper(`.slider2[data-slider-id="${index}"] .swiper-container`, {
            slidesPerView: "auto",
            spaceBetween: 0,
            watchSlidesProgress: true,
            preventClicks :true,
            a11y: false,
            observer: true,
            observeParents: true,
            observeSlideChildren: true,
            loop: isLoop,
            grid: {
                fill: 'row',
                rows: 1,
            },
            navigation: {
                nextEl: `.slider2[data-slider-id="${index}"] .swiper-button-next`,
                prevEl: `.slider2[data-slider-id="${index}"] .swiper-button-prev`,
            },
            pagination: {
                el: `.slider2[data-slider-id="${index}"] .swiper-pagination`,
                type: 'bullets',
                clickable: true,
            },
            scrollbar: {
                el: `.slider2[data-slider-id="${index}"] .swiper-scrollbar`,
                draggable: true,
                snapOnRelease: true,
                dragSize: 'auto',
            },
            breakpoints: {
                120: {
                    slidesPerView: 2,
                    loop: false,
                    grid: {
                        fill: 'row',
                        rows: 2,
                    },
                },
                576: {
                    loop: isLoop,
                    slidesPerView: "auto",
                    grid: {
                        fill: 'row',
                        rows: 1,
                    },
                },
            },
        })
    })

    $(".swiper-button").click(function (e) {
        e.stopPropagation()
    })
}

function Slider3() {
    let SlidersArray = []

    let sliders = document.querySelectorAll(".slider3")
    sliders.forEach((slider,index) => {
        slider.setAttribute("data-slider-id",index)
        let isLoop = slider.classList.contains("_loop")

        SlidersArray[index] = new Swiper(`.slider3[data-slider-id="${index}"] .swiper-container`, {
            slidesPerView: "auto",
            spaceBetween: 0,
            watchSlidesProgress: true,
            preventClicks :true,
            a11y: false,
            observer: true,
            observeParents: true,
            observeSlideChildren: true,
            loop: isLoop,
            grid: {
                fill: 'row',
                rows: 1,
            },
            navigation: {
                nextEl: `.slider3[data-slider-id="${index}"] .swiper-button-next`,
                prevEl: `.slider3[data-slider-id="${index}"] .swiper-button-prev`,
            },
            pagination: {
                el: `.slider3[data-slider-id="${index}"] .swiper-pagination`,
                type: 'bullets',
                clickable: true,
            },
            scrollbar: {
                el: `.slider3[data-slider-id="${index}"] .swiper-scrollbar`,
                draggable: true,
                snapOnRelease: true,
                dragSize: 'auto',
            },
            breakpoints: {
                120: {
                    slidesPerView: 1,
                    loop: false,
                    grid: {
                        fill: 'row',
                        rows: 2,
                    },
                },
                576: {
                    loop: isLoop,
                    slidesPerView: "auto",
                    grid: {
                        fill: 'row',
                        rows: 1,
                    },
                },
            },
        })
    })
}

function gallery() {
    let SlidersArray = []
    let options = {
        offset: {vertical: 0, horizontal: 10}
    };

    function initZoom(){
        console.log(true)
        let zoomItems = document.querySelectorAll(".swiper-slide-active ._zoom")
        zoomItems.forEach(item => {
            new ImageZoom(item, options);
        })
    }

    let sliders = document.querySelectorAll(".gallery")
    sliders.forEach((slider,index) => {
        slider.setAttribute("data-slider-id",index)
        let isLoop = slider.classList.contains("_loop")
        let gallery = {
            mySwiper: {},
            mySwiper2: {}
        }

        gallery.mySwiper = new Swiper(`.gallery[data-slider-id="${index}"] .mySwiper`, {
            spaceBetween: 0,
            slidesPerView: "auto",
            freeMode: true,
            watchSlidesProgress: true,
        });
        gallery.mySwiper2 = new Swiper(`.gallery[data-slider-id="${index}"] .mySwiper2`, {
            spaceBetween: 0,
            loop: isLoop,
            effect: 'fade',
            fadeEffect: {
                crossFade: true
            },
            navigation: {
                nextEl: `.gallery[data-slider-id="${index}"] .swiper-button-next`,
                prevEl: `.gallery[data-slider-id="${index}"] .swiper-button-prev`,
            },
            thumbs: {
                swiper:  gallery.mySwiper,
            },
            on: {
                init: function () {
                    initZoom()
                },
                slideChangeTransitionEnd: function () {
                    initZoom()
                },
            },
        });

        SlidersArray[index] = gallery

    })

}


Sliders()
Sliders2()
Slider3()
gallery()

let maps = document.querySelectorAll("[data-cord1]")

ymaps.ready(init);




function init(map){
    maps.forEach(map=> {
        createMap(map)
    })

    function createMap(map){
        let cord = [+map.dataset.cord1, +map.dataset.cord2]

        let myMap = new ymaps.Map(map, {
            center: cord,
            zoom: 17,
            controls: []
        });
        myMap.behaviors.disable('scrollZoom');
        myMap.controls.add('zoomControl');

        let placeMark = new ymaps.Placemark(cord, {},
            {
                iconLayout: 'default#image',
                iconImageHref: "img/mark.svg",
                iconImageSize: [90, 90],
                iconImageOffset: [-90, -60]
            }
        );
        myMap.geoObjects.add(placeMark);
    }
}

$("._toggle-about-detail").click(function () {
    $(".about-detail").toggleClass("_show")
})

$("._toggle-about-text").click(function () {
    $(".about-main").toggleClass("_show")
})

$(".qa-card__show").click(function () {
    if($(this).parents(".qa-card").hasClass("_active")){
        $(".qa-card").removeClass("_active")
        $(".qa-card__hidden").slideUp()
    } else{
        $(".qa-card").removeClass("_active")
        $(".qa-card__hidden").slideUp()
        $(this).parents(".qa-card").addClass("_active")
        $(this).siblings(".qa-card__hidden").slideDown()
    }
})

$(".category-menu .menu-item-has-children>a").click(function () {
    $(this).parent("li").toggleClass("_active")
    $(this).siblings("ul").slideToggle()
})

$(".category-menu__more").click(function () {
    $(".category-menu").toggleClass("_show")
})

$("._toggle-filter").click(function () {
    $("body").toggleClass("_open-filter")
    $("body").toggleClass("fixed-body")
})

$(".filter-group__top").click(function () {
    $(this).parents(".filter-group").toggleClass("_active")
    $(this).siblings(".filter-group__bottom").slideToggle()
})

$(".sort-item").click(function () {
    if($(this).hasClass("_active")){
        $(this).toggleClass("_reverse")
    }

    $(".sort-item").removeClass("_active")
    $(this).addClass("_active")

})

let filterSliders = document.querySelectorAll(".filter-slider")

filterSliders.forEach(slider => {
    const rangeSlider = slider.querySelector(`.range-slider`)
    const rangeInput0 = slider.querySelector(`.range-slider__input1`)
    const rangeInput1 = slider.querySelector(`.range-slider__input2`)
    const rangeInputs = [rangeInput0, rangeInput1]

    let startValue1 = +slider.getAttribute("data-start")
    let startValue2 = +slider.getAttribute("data-start2")
    let min = +slider.getAttribute("data-min")
    let max = +slider.getAttribute("data-max")

    if (rangeSlider) {
        noUiSlider.create(rangeSlider, {
            start: [startValue1, startValue2],
            connect: true,
            step: 1,
            range: {
                'min': min,
                'max': max
            }
        });
    }
    if (rangeSlider) {
        rangeSlider.noUiSlider.on('update', function(values, handle) {
            rangeInputs[handle].value = Math.round(values[handle])
        })
        rangeInputs.forEach((el, index) => {
            el.addEventListener('change', (e) => {
                setRangeSlider(index, e.currentTarget.value)
            })
        })
    }
    const setRangeSlider = (i, value) => {
        let array = [null, null];
        array[i] = value;

        rangeSlider.noUiSlider.set(array);
    };
})

$('[name="userType"]').change(function () {
    let val = $(this).attr("data-value")
    if(val === "_co"){
        $(`.profile-form`).addClass("_co")
        $(`.reg-form`).addClass("_co")
        $(`.buy-group`).addClass("_co")
    } else{
        $(`.profile-form`).removeClass("_co")
        $(`.reg-form`).removeClass("_co")
        $(`.buy-group`).removeClass("_co")
    }
})

$("._toggle-lk-menu").click(function () {
    $(".lk-menu").toggleClass("_open")
    $(".m-page").toggleClass("fixed-body")
})

$("._toggle-auth").click(function () {
    $("body").toggleClass("_open-auth")
    $("body").toggleClass("fixed-body")
})

function formatNums(el) {
    let num = +$(el).attr("data-num")
    $(el).html(num.toLocaleString())
}

$(".cart-row").each(function(i, el) {
    let input = $(el).find(".cart-row__count input")
    let price = $(el).find("._price")
    let priceSum = $(el).find("._price-sum")

    formatNums(price)
    formatNums(priceSum)

    $(input).change(function() {
        let val = $(this).val()
        let allSum = +$(price).attr("data-num") * val
        $(priceSum).attr("data-num", allSum)
        formatNums(priceSum)
    })
})

$(".cart__all input").change(function() {
    let checked = $(this).prop("checked")

    $(".cart-row__check input").each(function(i, el) {
        $(el).prop("checked", checked)
    })
})

$(".cart-row__check input").change(function() {
    let uncheckedItems = $(".cart-row__check input:not(:checked)").length

    if (uncheckedItems === 0) {
        $(".cart__all input").prop("checked", true)
    } else {
        $(".cart__all input").prop("checked", false)
    }
})
$(window).on('load resize', function(){
    if (window.innerWidth <= 992 && window.innerWidth > 576) {
        $('.product-info').insertBefore('.catalog-item__top');
    } else{
        $('.product-info').insertBefore('.product-info2');
    }

    if (window.innerWidth >= 992) {
        $('.product-cart').insertBefore('.product-pickup');
    } else{
        $('.product-cart').insertBefore('.product-info2');
    }
});

$("._add-cart-btn").click(function () {
    if($(this).hasClass("_active")){
        $(this).removeClass("_active")
    }else{
        $(this).addClass("_active")
        $(".product-alert").addClass("_active")
        setTimeout(()=>{
            $(".product-alert").removeClass("_active")
        },5000)
    }
})

$(document).on('click', '.product-alert__close', function(e) {
    $(".product-alert").removeClass("_active")
})





let fileInput = document.querySelector("[data-upload-id='file-input']")

if(fileInput){
    console.log(fileInput)
    const upload = new FileUploadWithPreview.FileUploadWithPreview('file-input');

    upload.options.multiple = true

    $(document).on('change', '.input-container input', function(e) {
        $(this).parents(".file-input").addClass("_uploaded")
    })

    $(document).on('click', '.image-preview-item-clear', function(e) {
        let count = $(this).parents(".file-input").find(".image-preview-item").length
        if(count === 1){
            $(this).parents(".file-input").removeClass("_uploaded")
        }
    })
}



let body = document.querySelector("body")
let modalTogglers = document.querySelectorAll("[data-modal]")
let modals = document.querySelectorAll(".modal")

modalTogglers.forEach(el => {
    el.onclick = function () {
        let modalId = el.getAttribute("data-modal")
        openModal(modalId)
    }
})

function closeModals() {
    modals.forEach(modal => {
        modal.classList.remove("_active")
        body.classList.remove("fixed-body2")
    })
}

function openModal(modalId) {
    closeModals()
    let modal = document.querySelector(`#${modalId}`)
    let closeButtons = modal.querySelectorAll(`._close-modal`)

    modal.classList.add("_active")
    body.classList.add("fixed-body2")


    closeButtons.forEach(btn => {
        btn.onclick = ()=> {
            modal.classList.remove("_active")
            body.classList.remove("fixed-body2")
        }
    })
}

var getScrollBarSize = (function() {
    var el = window.document.createElement('textarea'), style = {
        'visibility': 'hidden', 'position': 'absolute', 'zIndex': '-2147483647',
        'top': '-1000px', 'left': '-1000px', 'width': '1000px', 'height': '1000px',
        'overflow': 'scroll', 'margin': '0', 'border': '0', 'padding': '0'
    }, support = el.clientWidth !== undefined && el.offsetWidth !== undefined;

    for (var key in style) {
        if (style.hasOwnProperty(key)) {
            el.style[key] = style[key];
        }
    }

    return function() {
        var size = null;
        if (support && window.document.body) {
            window.document.body.appendChild(el);
            size = [el.offsetWidth - el.clientWidth, el.offsetHeight - el.clientHeight];
            window.document.body.removeChild(el);
        }

        document.documentElement.style.setProperty('--scrollWidth', `${size[0]}px`);
        return size;
    };
})();


$(".cookie-modal__btn").click(function () {
    $(".cookie-modal").removeClass("_active")
})

window.addEventListener('DOMContentLoaded', () => {
    fix100vh();
    window.addEventListener('resize', () => {
        fix100vh();
        getScrollBarSize()
    })

    getScrollBarSize()

    $('input[type="tel"]').mask('+7 (999) 999-99-99', { autoclear: false }, { placeholder: '+7 (   )    -  -  ' });
    $(".fg select").niceSelect()

    $("textarea").children().each(function() {
        $(this).value($(this).value().replace(/&#8232;/g," "));
    });
})

function fix100vh() {
    let vh = window.innerHeight * 0.01;
    document.documentElement.style.setProperty('--vh', `${vh}px`);
}

//# sourceMappingURL=../sourcemaps/main.min.js.map
